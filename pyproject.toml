[tool.poetry]
name = "sec_manager"
version = "1.0.0"
description = "Python utilities for datafabric security components"
authors = ["DataFabric"]
include = ["sec_manager/py.typed"]
classifiers=[
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
repository="https://github.com/mohamedbenchaliah/datafabric-sec-manager"
readme = "README.md"
keywords = ["sec_manager", "migrations_spinner", "pods_cleaner", "user_backend", "security"]

[tool.poetry.dependencies]
python = "^3.9.5"
fastjsonschema = "^2.14.5"
apache-airflow = "^2.1.0"
kubernetes = "^17.17.0"
flask_appbuilder = "^3.3.0"
jwcrypto = "^0.6"
alembic = "^1.6.5"
Flask-Login = "^0.3"
Flask = "^1.1.4"
jmespath = "^0.10.0"
pydantic = {version = "^1.8.2", optional = true }
email-validator = {version = "*", optional = true }

[tool.poetry.dev-dependencies]
coverage = {extras = ["toml"], version = "^5.5"}
pytest = "^6.2.2"
black = "^20.8b1"
flake8 = "^3.9.0"
flake8-black = "^0.2.1"
flake8-builtins = "^1.5.3"
flake8-comprehensions = "^3.4.0"
flake8-debugger = "^4.0.0"
flake8-fixme = "^1.1.1"
flake8-isort = "^4.0.0"
flake8-variables-names = "^0.0.4"
isort = "^5.8.0"
pytest-cov = "^2.11.1"
pytest-mock = "^3.5.1"
pdoc3 = "^0.9.2"
pytest-asyncio = "^0.15.1"
bandit = "^1.7.0"
radon = "^4.5.0"
xenon = "^0.7.3"
flake8-eradicate = "^1.0.0"
flake8-bugbear = "^21.3.2"
mkdocs-material = "^7.1.6"
mkdocs-git-revision-date-plugin = "^0.3.1"
mike = "^0.6.0"
sphinx = "^3.0.1"
sphinx_bootstrap_theme = "^0.7.1"
pydocstyle = "^5.0.2"


[tool.poetry.extras]
pydantic = ["pydantic", "email-validator"]

[tool.coverage.run]
source = ["sec_manager"]
omit = ["tests/*"]
branch = true

[tool.coverage.html]
directory = "test_report"
title = "Security Manager Test Coverage"

[tool.coverage.report]
fail_under = 70
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120
skip = "example"

[tool.black]
line-length = 120
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | example
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -vv"
testpaths = "./tests"
markers = "perf: marks perf tests to be deselected (deselect with '-m \"not perf\"')"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
